<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="FLASH27">
   <short-name>ボタンの目的を説明するラベルを提供する</short-name>
   <applicability>
      <p use-id="flash.applicability.general"/>
   </applicability>
   <applies-to>
      <success-criterion idref="text-equiv-all" relationship="sufficient"/>
      <success-criterion idref="navigation-mechanisms-refs" relationship="sufficient"/>
      <success-criterion idref="navigation-mechanisms-link" relationship="sufficient"/>
   </applies-to>
   <ua-issues>
      <ua-issue use-id="flash.ua-issue.general"/>
   </ua-issues>
   <description>
      <p>この実装方法の目的は、ボタンのアクセシブルな名前として説明的なテキストを提供して、ボタンの目的を記述することである。この説明により、利用者はこのボタンとその他の Flash ムービーのボタンを区別でき、このボタンを有効化するかどうかを決定できる。ボタンのアクセシブルな名前として、空の文字列では不十分である。</p>
      <p>テキストラベル付きのボタンの場合、ラベルテキストがボタンのアクセシブルな名前として使用される。画像ベースのボタンでテキストラベルが付いていない場合、このボタンのアクセシブルな名前は、アクセシビリティパネルを使用するか、またはスクリプトによって、別途設定する必要がある。</p>
   </description>
   <examples>
      <eg-group>
         <head>ラベルプロパティを使用してボタンの目的を記述する</head>
         <code xml:space="preserve"><![CDATA[import fl.controls.Button;
import fl.accessibility.ButtonAccImpl;

ButtonAccImpl.enableAccessibility();

var myButton:Button = new Button();
myButton.label = "View Items in Cart";
]]></code>
      </eg-group>
      <eg-group>
         <head>スクリプトを使用して、ActionScript 3.0 により画像ボタンのアクセシブルな名前を設定する</head>
         <description>
            <p>この事例では、ボタンの <prop>label</prop> プロパティで意図的に空の文字列を設定する。支援技術で認識できるようにするには、ボタンの <prop>accessibilityProperties.name</prop> プロパティを設定する。</p>
         </description>
         <code xml:space="preserve"><![CDATA[import fl.controls.Button;
import fl.accessibility.ButtonAccImpl;
import flash.accessibility.*;
import flash.system.Capabilities;
ButtonAccImpl.enableAccessibility();

var soundIsMuted = false;
var myButton:Button = new Button();
myButton.setStyle("icon", unmuted);
myButton.label = "";
myButton.x = myButton.y = 10;
myButton.width = myButton.height = 50;
updateAccName(myButton, "mute sound");
myButton.setStyle("icon", unmuted);
myButton.addEventListener(MouseEvent.CLICK, handleBtnClick);
addChild(myButton);

function handleBtnClick(e) {
  soundIsMuted = !soundIsMuted;
  myButton.setStyle("icon", soundIsMuted ? muted : unmuted);
  updateAccName(myButton, soundIsMuted ? "unmute sound" : "mute sound");
}

function updateAccName(obj, newName:String) {
  if (!obj.accessibilityProperties)
    obj.accessibilityProperties = new AccessibilityProperties();
  obj.accessibilityProperties.name = newName;
  if (Capabilities.hasAccessibility)
    Accessibility.updateProperties();
}]]></code>
      </eg-group>
   </examples>
   <related-techniques>
      <relatedtech idref="G91"/>
      <relatedtech idref="FLASH5"/>
      <relatedtech idref="FLASH4"/>
      <!--relatedtech>http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_textual_identification_for_buttons_that_otherwise_rely_only_on_sensory_information_to_be_understood</relatedtech-->
      <relatedtech idref="FLASH30"/>
      <!--relatedtech>http://trace.wisc.edu/wcag_wiki/index.php?title=Supplementing_button_labels_with_additional_text</relatedtech-->
   </related-techniques>
   <tests>
      <procedure>
         <p>この実装方法を用いている Flash ムービーの各ボタンについて、次のことを確認する。</p>
         <olist>
            <item>
               <p>ボタンのラベルテキストがボタンの目的を正しく説明している</p>
            </item>
            <item>
               <p>ボタンにテキストラベルがない場合、ボタンのアクセシブルな名前として説明的なテキストが追加されている</p>
            </item>
            <item>
               <p>ボタンにラベルテキストとアクセシブルな名前の両方が含まれている場合、その二つの組み合わせが、ボタンの目的の説明として正しいものである</p>
            </item>
         </olist>
      </procedure>
      <expected-results>
         <ulist>
            <item>
               <p>1., 2. または 3. を満たしている。</p>
            </item>
         </ulist>
      </expected-results>
   </tests>
   <admin>
      <source>
						   <loc xmlns:xlink="http://www.w3.org/1999/xlink"
              href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_button_labels_that_describe_the_purpose_of_a_button"/>
					</source>
   </admin>
</technique>

